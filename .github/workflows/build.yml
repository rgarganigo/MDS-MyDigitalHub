name: Build and publish

# Environment variables
env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

on:
  push:
    branches:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  code-analysis:
    name: 🔎 Analyze code with SonarQube
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysiss
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  build-publish-backend:
    name: 🛠️ Build and publish backend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    
    steps:
      # Checkout (clone) the repository
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
    
      # Login to the Gitbub Container Registry
      - name: 🐳 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      # Get Docker image metadata (tags, labels, etc.)
      - name: 🗃️ Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
      
      # Set up Docker Buildx (the docker build system)
      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push the docker image to repository
      - name: 🛠️ Build and ⏫ push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          no-cache: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            "HOST=0.0.0.0"
            "PORT=1337"
            "NODE_ENV=production"
            "APP_KEYS=${{ secrets.APP_KEYS }}"
            "API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}"
            "ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}"
            "TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}"
            "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            "DATABASE_CLIENT=mysql"
            "DATABASE_PORT=3306"
            "DATABASE_NAME=myDigitalHub"
            "DATABASE_USERNAME=strapi"
            "DATABASE_PASSWORD=strapi"

  build-publish-frontend:
    name: 🛠️ Build and push frontend
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
  
      - name: 🔐 Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: 🗃️ Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
      # Setting up Docker Buildx with docker-container driver is required
      # at the moment to be able to use a subdirectory with Git context
      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: 🛠️ Build and ⏫ push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          no-cache: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            "NEXT_PUBLIC_STRAPI_URL=${{ secrets.NEXT_PUBLIC_STRAPI_URL }}"
            "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}"
            "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}"
            
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-publish-backend, build-publish-frontend]
    steps:
      - name: 🔐 Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} > ~/.ssh/known_hosts
      
      - name: ⏬ Pull and 🚀 Start containers
        run : |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ${{secrets.DEPLOY_WORKDIR}} && docker compose pull && docker compose down && docker compose up -d && exit"
      - name: 🧹 Clean up
        run: rm -rf ~/.ssh
          
          